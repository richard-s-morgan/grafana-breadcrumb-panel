{"version":3,"sources":["../src/breadcrumb_ctrl.js"],"names":["_","PanelCtrl","panelDefaults","isRootDashboard","hideTextInRootDashboard","breadcrumbItemsMaxAmount","BreadcrumbCtrl","$scope","$injector","$location","backendSrv","defaults","panel","$on","event","newUrl","oldUrl","upText","events","on","onInitEditMode","bind","navigate","updateText","dashboardList","windowLocation","sessionStorage","getItem","setItem","search","breadcrumb","items","split","createDashboardList","JSON","parse","window","onpopstate","length","state","addEditorTab","allDashboards","filterDashboardList","then","result","DBlist","allDBs","orgId","urlRoot","location","href","substr","indexOf","filter","filterItem","isInDatabase","findIndex","dbItem","url","map","item","uid","find","name","title","params","parseParamsString","fullUrl","stringify","parsedBreadcrumb","index","pop","parameter","urlparts","prefix","encodeURIComponent","pars","i","lastIndexOf","splice","join","grafanaQueryParams","Object","keys","param","path","pathname","currentDashboard","dbSource","uri","obj","push","removeURLParameter","dashIndex","parseInt","isNaN","shift","parseBreadcrumbForUrl","queryObject","parseParamsObject","replace","history","replaceState","paramsObj","charAt","paramsArray","paramItem","paramItemArr","paramsString","paramKey","queryParams","templateUrl"],"mappings":"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","file":"breadcrumb_ctrl.js","sourcesContent":["/**\r\n * <h3>Breadcrumb panel for Grafana</h3>\r\n *\r\n * This breadcumb panel utilizes session storage to store dashboards where user has visited.\r\n * When panel is loaded it first checks if breadcrumb is given in url params and utilizes that.\r\n * If no breadcrumb is given in url params then panel tries to read breadcrumb from session storage.\r\n * Finally the panel adds the just loaded dashboard as the latest item in dashboard and updates session storage.\r\n * Breadcrumb stores the dashboard's name, url and possible query params to the session storage.\r\n * If user navigates with browser back button then breadcrumb is recreated from previous url params.\r\n * Also if user navigates back by clicking one of the breadcrumb items then the items following the selected\r\n * item are removed from breadcrumb, user is moved to selected dashboard and session storage is updated.\r\n */\r\nimport _ from \"lodash\";\r\nimport { PanelCtrl } from \"app/plugins/sdk\";\r\nimport \"./breadcrumb.css!\";\r\nconst panelDefaults = {\r\n    isRootDashboard: false,\r\n    hideTextInRootDashboard: false,\r\n    breadcrumbItemsMaxAmount: 25,\r\n};\r\nclass BreadcrumbCtrl extends PanelCtrl {\r\n    /**\r\n     * Breadcrumb class constructor\r\n     * @param {IBreadcrumbScope} $scope Angular scope\r\n     * @param {ng.auto.IInjectorService} $injector Angluar injector service\r\n     * @param {ng.ILocationService} $location Angular location service\r\n     * @param {any} backendSrv Grafana backend callback\r\n     */\r\n    constructor($scope, $injector, $location, backendSrv) {\r\n        super($scope, $injector);\r\n        panelDefaults.isRootDashboard = false;\r\n        panelDefaults.hideTextInRootDashboard = false;\r\n        panelDefaults.breadcrumbItemsMaxAmount = 25;\r\n        _.defaults(this.panel, panelDefaults);\r\n        $scope.$on(\"$locationChangeSuccess\", function (event, newUrl, oldUrl) {\r\n            $scope.upText();\r\n        });\r\n        this.events.on(\"init-edit-mode\", this.onInitEditMode.bind(this));\r\n        // Init variables\r\n        $scope.navigate = this.navigate.bind(this);\r\n        $scope.upText = this.updateText.bind(this);\r\n        this.backendSrv = backendSrv;\r\n        this.dashboardList = [];\r\n        this.windowLocation = $location;\r\n        // Check for browser session storage and create one if it doesn't exist\r\n        if (!sessionStorage.getItem(\"dashlist\") || this.panel.isRootDashboard) {\r\n            sessionStorage.setItem(\"dashlist\", \"[]\");\r\n        }\r\n        // Check if URL params has breadcrumb\r\n        if ($location.search().breadcrumb) {\r\n            const items = $location.search().breadcrumb.split(\",\");\r\n            this.createDashboardList(items);\r\n        }\r\n        else {\r\n            // If no URL params are given then get dashboard list from session storage\r\n            this.dashboardList = JSON.parse(sessionStorage.getItem(\"dashlist\"));\r\n        }\r\n        this.updateText();\r\n        // Listen for PopState events so we know when user navigates back with browser\r\n        // On back navigation we'll take the changed breadcrumb param from url query and\r\n        // recreate dashboard list\r\n        window.onpopstate = (event) => {\r\n            if (this.dashboardList.length > 0) {\r\n                if ($location.state().breadcrumb) {\r\n                    const items = $location.state().breadcrumb.split(\",\");\r\n                    this.createDashboardList(items);\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * Callback for showing panel editor template\r\n     */\r\n    onInitEditMode() {\r\n        this.addEditorTab(\"Options\", \"public/plugins/digiapulssi-breadcrumb-panel/editor.html\", 2);\r\n    }\r\n    /**\r\n     * Create dashboard items\r\n     * @param {string[]} items Array of dashboard ids\r\n     */\r\n    createDashboardList(items) {\r\n        // console.log(\"BC: createDashboardList: \" + items);\r\n        if (this.allDashboards) {\r\n            // Dashboard data has been loaeded from Grafana\r\n            this.filterDashboardList(items, this.allDashboards);\r\n        }\r\n        else {\r\n            // Fetch list of all dashboards from Grafana\r\n            this.backendSrv.search().then((result) => {\r\n                this.filterDashboardList(items, result);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Filter dashboard list\r\n     * @param {string[]} DBlist Array of dashboards ids to be displayed\r\n     * @param {any} allDBs All dashboards fetched from Grafana API\r\n     */\r\n    filterDashboardList(DBlist, allDBs) {\r\n        var orgId = this.windowLocation.search()[\"orgId\"];\r\n        var urlRoot = window.location.href.substr(0, window.location.href.indexOf(\"/d/\") + 1);\r\n        this.dashboardList = DBlist.filter((filterItem) => {\r\n            const isInDatabase = _.findIndex(allDBs, (dbItem) => dbItem.url.indexOf(`/d/${filterItem}`) > -1) > -1;\r\n            return isInDatabase;\r\n        }).map((item) => {\r\n            const uid = _.find(allDBs, (dbItem) => dbItem.url.indexOf(`/d/${item}`) > -1).uid;\r\n            return {\r\n                url: `/d/${uid}`,\r\n                name: _.find(allDBs, (dbItem) => dbItem.url.indexOf(`/d/${item}`) > -1)\r\n                    .title,\r\n                params: this.parseParamsString({ orgId }),\r\n                uid,\r\n                fullUrl: urlRoot + \"/d/\" + uid + this.parseParamsString({ orgId }),\r\n            };\r\n        });\r\n        // Update session storage\r\n        // console.log(\r\n        //   \"BC: Storing dashlist in filterDashboardList: \" +\r\n        //     JSON.stringify(this.dashboardList)\r\n        // );\r\n        sessionStorage.setItem(\"dashlist\", JSON.stringify(this.dashboardList));\r\n    }\r\n    /**\r\n     * Parse breadcrumb string for URL\r\n     * @returns {string}\r\n     */\r\n    parseBreadcrumbForUrl() {\r\n        let parsedBreadcrumb = \"\";\r\n        this.dashboardList.map((item, index) => {\r\n            parsedBreadcrumb += item.url.split(\"/\").pop();\r\n            if (index < this.dashboardList.length - 1) {\r\n                parsedBreadcrumb += \",\";\r\n            }\r\n        });\r\n        // console.log(\"BC: parsedBreadcrumb: \" + parsedBreadcrumb);\r\n        return parsedBreadcrumb;\r\n    }\r\n    removeURLParameter(url, parameter) {\r\n        //prefer to use l.search if you have a location/link object\r\n        // console.log(\r\n        //   \"BC: Start of removeURLParameter: \" + url + \" --- \" + parameter\r\n        // );\r\n        var urlparts = url.split(\"?\");\r\n        if (urlparts.length >= 2) {\r\n            var prefix = encodeURIComponent(parameter) + \"=\";\r\n            var pars = urlparts[1].split(/[&;]/g);\r\n            //reverse iteration as may be destructive\r\n            for (var i = pars.length; i-- > 0;) {\r\n                //idiom for string.startsWith\r\n                if (pars[i].lastIndexOf(prefix, 0) !== -1) {\r\n                    pars.splice(i, 1);\r\n                }\r\n            }\r\n            // console.log(\r\n            //   \"BC: Return of parts removeURLParameter: \" +\r\n            //     urlparts[0] +\r\n            //     (pars.length > 0 ? \"?\" + pars.join(\"&\") : \"\")\r\n            // );\r\n            return urlparts[0] + (pars.length > 0 ? \"?\" + pars.join(\"&\") : \"\");\r\n        }\r\n        // console.log(\"BC: Final return of removeURLParameter: \" + url);\r\n        return url;\r\n    }\r\n    /**\r\n     * Update Breadcrumb items\r\n     */\r\n    updateText() {\r\n        // Get Grafana query params\r\n        let grafanaQueryParams = \"\";\r\n        Object.keys(this.windowLocation.search()).map((param) => {\r\n            // console.log(\"BC: updateText: \" + param);\r\n            if (this.windowLocation.search()[param] &&\r\n                this.windowLocation.search()[param] !== \"null\" &&\r\n                param !== \"var-UserName\" // ignore this\r\n            ) {\r\n                grafanaQueryParams +=\r\n                    \"&\" + param + \"=\" + this.windowLocation.search()[param];\r\n            }\r\n        });\r\n        // Fetch list of all dashboards from Grafana\r\n        this.backendSrv.search().then((result) => {\r\n            this.allDashboards = result;\r\n            // Set current dashboard\r\n            var path = window.location.pathname.split(\"/\");\r\n            this.currentDashboard = path.pop();\r\n            const dbSource = \"/d/\" + path.pop();\r\n            const uri = `${dbSource}`;\r\n            var obj = _.find(result, (dbItem) => dbItem.url.indexOf(`${uri}`) > -1);\r\n            // Add current dashboard to breadcrumb if it doesn't exist\r\n            if (_.findIndex(this.dashboardList, (dbItem) => dbItem.url.indexOf(`${uri}`) > -1) < 0 &&\r\n                obj) {\r\n                this.dashboardList.push({\r\n                    url: uri,\r\n                    name: obj.title,\r\n                    params: grafanaQueryParams,\r\n                    uid: obj.uid,\r\n                    fullUrl: this.removeURLParameter(window.location.href, \"var-UserName\"),\r\n                });\r\n            }\r\n            else {\r\n                var dashIndex = _.findIndex(this.dashboardList, (dbItem) => dbItem.url.indexOf(`${uri}`) > -1);\r\n                this.dashboardList[dashIndex] = {\r\n                    url: uri,\r\n                    name: obj.title,\r\n                    params: grafanaQueryParams,\r\n                    uid: obj.uid,\r\n                    fullUrl: this.removeURLParameter(window.location.href, \"var-UserName\"),\r\n                };\r\n            }\r\n            // If the amount of items exceeds the maximum then remove oldest item\r\n            const breadcrumbItemsMaxAmount = parseInt(this.panel.breadcrumbItemsMaxAmount, 10);\r\n            if (!isNaN(breadcrumbItemsMaxAmount) &&\r\n                this.dashboardList.length > breadcrumbItemsMaxAmount) {\r\n                this.dashboardList.shift();\r\n            }\r\n            // Update session storage\r\n            // console.log(\r\n            //   \"BC: Storing dashlist in updateText: \" +\r\n            //     JSON.stringify(this.dashboardList)\r\n            // );\r\n            sessionStorage.setItem(\"dashlist\", JSON.stringify(this.dashboardList));\r\n            // Parse modified breadcrumb and set it to url query params\r\n            const parsedBreadcrumb = this.parseBreadcrumbForUrl();\r\n            const queryObject = this.parseParamsObject(grafanaQueryParams);\r\n            queryObject[\"breadcrumb\"] = parsedBreadcrumb;\r\n            this.windowLocation.state(queryObject).replace();\r\n            history.replaceState(queryObject, \"\");\r\n        });\r\n    }\r\n    /**\r\n     * Parse params string to object\r\n     * @param {string} params\r\n     * @returns {Object}\r\n     */\r\n    parseParamsObject(params) {\r\n        const paramsObj = {};\r\n        if (params.charAt(0) === \"?\" || params.charAt(0) === \"&\") {\r\n            params = params.substr(1, params.length);\r\n        }\r\n        const paramsArray = params.split(\"&\");\r\n        paramsArray.map((paramItem) => {\r\n            const paramItemArr = paramItem.split(\"=\");\r\n            paramsObj[paramItemArr[0]] = paramItemArr[1];\r\n        });\r\n        return paramsObj;\r\n    }\r\n    /**\r\n     * Parse params object to string\r\n     * @param {Object} params\r\n     * @returns {string}\r\n     */\r\n    parseParamsString(params) {\r\n        let paramsString = \"?\";\r\n        Object.keys(params).map((paramKey, index) => {\r\n            paramsString += paramKey + \"=\" + params[paramKey];\r\n            if (index < Object.keys(params).length - 1) {\r\n                paramsString += \"&\";\r\n            }\r\n        });\r\n        return paramsString;\r\n    }\r\n    /**\r\n     * Navigate to given dashboard\r\n     * @param {string} url\r\n     */\r\n    navigate(url, params) {\r\n        // Check if user is navigating backwards in breadcrumb and\r\n        // remove all items that follow the selected item in that case\r\n        const index = _.findIndex(this.dashboardList, (dbItem) => dbItem.url.indexOf(`${url}`) > -1);\r\n        if (index > -1 && this.dashboardList.length >= index + 2) {\r\n            this.dashboardList.splice(index + 1, this.dashboardList.length - index - 1);\r\n            // console.log(\r\n            //   \"BC: Storing dashlist in navigate: \" +\r\n            //     JSON.stringify(this.dashboardList)\r\n            // );\r\n            sessionStorage.setItem(\"dashlist\", JSON.stringify(this.dashboardList));\r\n        }\r\n        // Parse params string to object\r\n        const queryParams = this.parseParamsObject(params);\r\n        // Delete possible breadcrumb param so that breadcrumb from session will be used instead\r\n        delete queryParams[\"breadcrumb\"];\r\n        // Check url root assuming that Grafana dashboard url has string \"/d/\"\r\n        let urlRoot = window.location.href.substr(0, window.location.href.indexOf(\"/d/\") + 1);\r\n        if (url.charAt(0) != \"/\") {\r\n            urlRoot += \"/\";\r\n        }\r\n    }\r\n}\r\nBreadcrumbCtrl.templateUrl = \"module.html\";\r\nexport { BreadcrumbCtrl, BreadcrumbCtrl as PanelCtrl };\r\n//# sourceMappingURL=breadcrumb_ctrl.js.map"]}